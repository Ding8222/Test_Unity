// Generated by sprotodump. DO NOT EDIT!
// source: clientproto.lua

using System;
using Sproto;
using System.Collections.Generic;

namespace ClientSproto { 
	public class auth {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _etokens; // tag 0
			public string etokens {
				get { return _etokens; }
				set { base.has_field.set_field (0, true); _etokens = value; }
			}
			public bool HasEtokens {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.etokens = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.etokens, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class challenge {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _hmac; // tag 0
			public string hmac {
				get { return _hmac; }
				set { base.has_field.set_field (0, true); _hmac = value; }
			}
			public bool HasHmac {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.hmac = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.hmac, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _result; // tag 0
			public string result {
				get { return _result; }
				set { base.has_field.set_field (0, true); _result = value; }
			}
			public bool HasResult {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.result = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.result, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class character_create : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _job; // tag 1
		public Int64 job {
			get { return _job; }
			set { base.has_field.set_field (1, true); _job = value; }
		}
		public bool HasJob {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _sex; // tag 2
		public Int64 sex {
			get { return _sex; }
			set { base.has_field.set_field (2, true); _sex = value; }
		}
		public bool HasSex {
			get { return base.has_field.has_field (2); }
		}

		public character_create () : base(max_field_count) {}

		public character_create (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.job = base.deserialize.read_integer ();
					break;
				case 2:
					this.sex = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.job, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.sex, 2);
			}

			return base.serialize.close ();
		}
	}


	public class character_overview : SprotoTypeBase {
		private static int max_field_count = 6;
		
		
		private Int64 _uuid; // tag 0
		public Int64 uuid {
			get { return _uuid; }
			set { base.has_field.set_field (0, true); _uuid = value; }
		}
		public bool HasUuid {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _level; // tag 1
		public Int64 level {
			get { return _level; }
			set { base.has_field.set_field (1, true); _level = value; }
		}
		public bool HasLevel {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _job; // tag 2
		public Int64 job {
			get { return _job; }
			set { base.has_field.set_field (2, true); _job = value; }
		}
		public bool HasJob {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _sex; // tag 3
		public Int64 sex {
			get { return _sex; }
			set { base.has_field.set_field (3, true); _sex = value; }
		}
		public bool HasSex {
			get { return base.has_field.has_field (3); }
		}

		private string _name; // tag 4
		public string name {
			get { return _name; }
			set { base.has_field.set_field (4, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (4); }
		}

		private string _createtime; // tag 5
		public string createtime {
			get { return _createtime; }
			set { base.has_field.set_field (5, true); _createtime = value; }
		}
		public bool HasCreatetime {
			get { return base.has_field.has_field (5); }
		}

		public character_overview () : base(max_field_count) {}

		public character_overview (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.uuid = base.deserialize.read_integer ();
					break;
				case 1:
					this.level = base.deserialize.read_integer ();
					break;
				case 2:
					this.job = base.deserialize.read_integer ();
					break;
				case 3:
					this.sex = base.deserialize.read_integer ();
					break;
				case 4:
					this.name = base.deserialize.read_string ();
					break;
				case 5:
					this.createtime = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.uuid, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.level, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.job, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.sex, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_string (this.name, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_string (this.createtime, 5);
			}

			return base.serialize.close ();
		}
	}


	public class character_pos : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _x; // tag 0
		public Int64 x {
			get { return _x; }
			set { base.has_field.set_field (0, true); _x = value; }
		}
		public bool HasX {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _y; // tag 1
		public Int64 y {
			get { return _y; }
			set { base.has_field.set_field (1, true); _y = value; }
		}
		public bool HasY {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _z; // tag 2
		public Int64 z {
			get { return _z; }
			set { base.has_field.set_field (2, true); _z = value; }
		}
		public bool HasZ {
			get { return base.has_field.has_field (2); }
		}

		public character_pos () : base(max_field_count) {}

		public character_pos (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.x = base.deserialize.read_integer ();
					break;
				case 1:
					this.y = base.deserialize.read_integer ();
					break;
				case 2:
					this.z = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.x, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.y, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.z, 2);
			}

			return base.serialize.close ();
		}
	}


	public class charactercreate {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private string _name; // tag 0
			public string name {
				get { return _name; }
				set { base.has_field.set_field (0, true); _name = value; }
			}
			public bool HasName {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _job; // tag 1
			public Int64 job {
				get { return _job; }
				set { base.has_field.set_field (1, true); _job = value; }
			}
			public bool HasJob {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _sex; // tag 2
			public Int64 sex {
				get { return _sex; }
				set { base.has_field.set_field (2, true); _sex = value; }
			}
			public bool HasSex {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.name = base.deserialize.read_string ();
						break;
					case 1:
						this.job = base.deserialize.read_integer ();
						break;
					case 2:
						this.sex = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.name, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.job, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.sex, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private character_overview _character; // tag 0
			public character_overview character {
				get { return _character; }
				set { base.has_field.set_field (0, true); _character = value; }
			}
			public bool HasCharacter {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.character = base.deserialize.read_obj<character_overview> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.character, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class characterpick {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _uuid; // tag 0
			public Int64 uuid {
				get { return _uuid; }
				set { base.has_field.set_field (0, true); _uuid = value; }
			}
			public bool HasUuid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.uuid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.uuid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _ok; // tag 0
			public bool ok {
				get { return _ok; }
				set { base.has_field.set_field (0, true); _ok = value; }
			}
			public bool HasOk {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.ok = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.ok, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class getcharacterlist {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Dictionary<Int64, character_overview> _character; // tag 0
			public Dictionary<Int64, character_overview> character {
				get { return _character; }
				set { base.has_field.set_field (0, true); _character = value; }
			}
			public bool HasCharacter {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.character = base.deserialize.read_map<Int64, character_overview>(v => v.uuid);
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.character, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _clientkey; // tag 0
			public string clientkey {
				get { return _clientkey; }
				set { base.has_field.set_field (0, true); _clientkey = value; }
			}
			public bool HasClientkey {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.clientkey = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.clientkey, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _challenge; // tag 0
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (0, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (0); }
			}

			private string _serverkey; // tag 1
			public string serverkey {
				get { return _serverkey; }
				set { base.has_field.set_field (1, true); _serverkey = value; }
			}
			public bool HasServerkey {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.challenge = base.deserialize.read_string ();
						break;
					case 1:
						this.serverkey = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.challenge, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.serverkey, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class login {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _handshake; // tag 0
			public string handshake {
				get { return _handshake; }
				set { base.has_field.set_field (0, true); _handshake = value; }
			}
			public bool HasHandshake {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.handshake = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.handshake, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _result; // tag 0
			public string result {
				get { return _result; }
				set { base.has_field.set_field (0, true); _result = value; }
			}
			public bool HasResult {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.result = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.result, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class mapready {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _ok; // tag 0
			public bool ok {
				get { return _ok; }
				set { base.has_field.set_field (0, true); _ok = value; }
			}
			public bool HasOk {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.ok = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.ok, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class moveto {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private character_pos _pos; // tag 0
			public character_pos pos {
				get { return _pos; }
				set { base.has_field.set_field (0, true); _pos = value; }
			}
			public bool HasPos {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.pos = base.deserialize.read_obj<character_pos> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.pos, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private character_pos _pos; // tag 0
			public character_pos pos {
				get { return _pos; }
				set { base.has_field.set_field (0, true); _pos = value; }
			}
			public bool HasPos {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.pos = base.deserialize.read_obj<character_pos> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.pos, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private string _ud; // tag 2
		public string ud {
			get { return _ud; }
			set { base.has_field.set_field (2, true); _ud = value; }
		}
		public bool HasUd {
			get { return base.has_field.has_field (2); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.ud = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_string (this.ud, 2);
			}

			return base.serialize.close ();
		}
	}


	public class ping {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _userid; // tag 0
			public string userid {
				get { return _userid; }
				set { base.has_field.set_field (0, true); _userid = value; }
			}
			public bool HasUserid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.userid = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.userid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _ok; // tag 0
			public bool ok {
				get { return _ok; }
				set { base.has_field.set_field (0, true); _ok = value; }
			}
			public bool HasOk {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.ok = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.ok, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class quitgame {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _ok; // tag 0
			public bool ok {
				get { return _ok; }
				set { base.has_field.set_field (0, true); _ok = value; }
			}
			public bool HasOk {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.ok = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.ok, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class ClientProtocol : ProtocolBase {
	public static  ClientProtocol Instance = new ClientProtocol();
	private ClientProtocol() {
		Protocol.SetProtocol<auth> (auth.Tag);
		Protocol.SetRequest<ClientSproto.auth.request> (auth.Tag);

		Protocol.SetProtocol<challenge> (challenge.Tag);
		Protocol.SetRequest<ClientSproto.challenge.request> (challenge.Tag);
		Protocol.SetResponse<ClientSproto.challenge.response> (challenge.Tag);

		Protocol.SetProtocol<charactercreate> (charactercreate.Tag);
		Protocol.SetRequest<ClientSproto.charactercreate.request> (charactercreate.Tag);
		Protocol.SetResponse<ClientSproto.charactercreate.response> (charactercreate.Tag);

		Protocol.SetProtocol<characterpick> (characterpick.Tag);
		Protocol.SetRequest<ClientSproto.characterpick.request> (characterpick.Tag);
		Protocol.SetResponse<ClientSproto.characterpick.response> (characterpick.Tag);

		Protocol.SetProtocol<getcharacterlist> (getcharacterlist.Tag);
		Protocol.SetResponse<ClientSproto.getcharacterlist.response> (getcharacterlist.Tag);

		Protocol.SetProtocol<handshake> (handshake.Tag);
		Protocol.SetRequest<ClientSproto.handshake.request> (handshake.Tag);
		Protocol.SetResponse<ClientSproto.handshake.response> (handshake.Tag);

		Protocol.SetProtocol<login> (login.Tag);
		Protocol.SetRequest<ClientSproto.login.request> (login.Tag);
		Protocol.SetResponse<ClientSproto.login.response> (login.Tag);

		Protocol.SetProtocol<mapready> (mapready.Tag);
		Protocol.SetResponse<ClientSproto.mapready.response> (mapready.Tag);

		Protocol.SetProtocol<moveto> (moveto.Tag);
		Protocol.SetRequest<ClientSproto.moveto.request> (moveto.Tag);
		Protocol.SetResponse<ClientSproto.moveto.response> (moveto.Tag);

		Protocol.SetProtocol<ping> (ping.Tag);
		Protocol.SetRequest<ClientSproto.ping.request> (ping.Tag);
		Protocol.SetResponse<ClientSproto.ping.response> (ping.Tag);

		Protocol.SetProtocol<quitgame> (quitgame.Tag);
		Protocol.SetResponse<ClientSproto.quitgame.response> (quitgame.Tag);

	}

	public class auth {
		public const int Tag = 4;
	}

	public class challenge {
		public const int Tag = 3;
	}

	public class charactercreate {
		public const int Tag = 7;
	}

	public class characterpick {
		public const int Tag = 8;
	}

	public class getcharacterlist {
		public const int Tag = 6;
	}

	public class handshake {
		public const int Tag = 2;
	}

	public class login {
		public const int Tag = 5;
	}

	public class mapready {
		public const int Tag = 9;
	}

	public class moveto {
		public const int Tag = 10;
	}

	public class ping {
		public const int Tag = 1;
	}

	public class quitgame {
		public const int Tag = 11;
	}

}
